# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from argocd.configuration import Configuration


class V1alpha1SCMProviderGeneratorBitbucketServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_branches': 'bool',
        'api': 'str',
        'basic_auth': 'V1alpha1BasicAuthBitbucketServer',
        'bearer_token': 'V1alpha1BearerTokenBitbucket',
        'ca_ref': 'V1alpha1ConfigMapKeyRef',
        'insecure': 'bool',
        'project': 'str'
    }

    attribute_map = {
        'all_branches': 'allBranches',
        'api': 'api',
        'basic_auth': 'basicAuth',
        'bearer_token': 'bearerToken',
        'ca_ref': 'caRef',
        'insecure': 'insecure',
        'project': 'project'
    }

    def __init__(self, all_branches=None, api=None, basic_auth=None, bearer_token=None, ca_ref=None, insecure=None, project=None, _configuration=None):  # noqa: E501
        """V1alpha1SCMProviderGeneratorBitbucketServer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._all_branches = None
        self._api = None
        self._basic_auth = None
        self._bearer_token = None
        self._ca_ref = None
        self._insecure = None
        self._project = None
        self.discriminator = None

        if all_branches is not None:
            self.all_branches = all_branches
        if api is not None:
            self.api = api
        if basic_auth is not None:
            self.basic_auth = basic_auth
        if bearer_token is not None:
            self.bearer_token = bearer_token
        if ca_ref is not None:
            self.ca_ref = ca_ref
        if insecure is not None:
            self.insecure = insecure
        if project is not None:
            self.project = project

    @property
    def all_branches(self):
        """Gets the all_branches of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501

        Scan all branches instead of just the default branch.  # noqa: E501

        :return: The all_branches of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: bool
        """
        return self._all_branches

    @all_branches.setter
    def all_branches(self, all_branches):
        """Sets the all_branches of this V1alpha1SCMProviderGeneratorBitbucketServer.

        Scan all branches instead of just the default branch.  # noqa: E501

        :param all_branches: The all_branches of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: bool
        """

        self._all_branches = all_branches

    @property
    def api(self):
        """Gets the api of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501

        The Bitbucket Server REST API URL to talk to. Required.  # noqa: E501

        :return: The api of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this V1alpha1SCMProviderGeneratorBitbucketServer.

        The Bitbucket Server REST API URL to talk to. Required.  # noqa: E501

        :param api: The api of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: str
        """

        self._api = api

    @property
    def basic_auth(self):
        """Gets the basic_auth of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501


        :return: The basic_auth of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: V1alpha1BasicAuthBitbucketServer
        """
        return self._basic_auth

    @basic_auth.setter
    def basic_auth(self, basic_auth):
        """Sets the basic_auth of this V1alpha1SCMProviderGeneratorBitbucketServer.


        :param basic_auth: The basic_auth of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: V1alpha1BasicAuthBitbucketServer
        """

        self._basic_auth = basic_auth

    @property
    def bearer_token(self):
        """Gets the bearer_token of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501


        :return: The bearer_token of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: V1alpha1BearerTokenBitbucket
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token):
        """Sets the bearer_token of this V1alpha1SCMProviderGeneratorBitbucketServer.


        :param bearer_token: The bearer_token of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: V1alpha1BearerTokenBitbucket
        """

        self._bearer_token = bearer_token

    @property
    def ca_ref(self):
        """Gets the ca_ref of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501


        :return: The ca_ref of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: V1alpha1ConfigMapKeyRef
        """
        return self._ca_ref

    @ca_ref.setter
    def ca_ref(self, ca_ref):
        """Sets the ca_ref of this V1alpha1SCMProviderGeneratorBitbucketServer.


        :param ca_ref: The ca_ref of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: V1alpha1ConfigMapKeyRef
        """

        self._ca_ref = ca_ref

    @property
    def insecure(self):
        """Gets the insecure of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501


        :return: The insecure of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this V1alpha1SCMProviderGeneratorBitbucketServer.


        :param insecure: The insecure of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    @property
    def project(self):
        """Gets the project of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501

        Project to scan. Required.  # noqa: E501

        :return: The project of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this V1alpha1SCMProviderGeneratorBitbucketServer.

        Project to scan. Required.  # noqa: E501

        :param project: The project of this V1alpha1SCMProviderGeneratorBitbucketServer.  # noqa: E501
        :type: str
        """

        self._project = project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1SCMProviderGeneratorBitbucketServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SCMProviderGeneratorBitbucketServer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1SCMProviderGeneratorBitbucketServer):
            return True

        return self.to_dict() != other.to_dict()
