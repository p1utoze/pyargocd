# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from argocd.configuration import Configuration


class V1alpha1ApplicationDestinationServiceAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_service_account': 'str',
        'namespace': 'str',
        'server': 'str'
    }

    attribute_map = {
        'default_service_account': 'defaultServiceAccount',
        'namespace': 'namespace',
        'server': 'server'
    }

    def __init__(self, default_service_account=None, namespace=None, server=None, _configuration=None):  # noqa: E501
        """V1alpha1ApplicationDestinationServiceAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default_service_account = None
        self._namespace = None
        self._server = None
        self.discriminator = None

        if default_service_account is not None:
            self.default_service_account = default_service_account
        if namespace is not None:
            self.namespace = namespace
        if server is not None:
            self.server = server

    @property
    def default_service_account(self):
        """Gets the default_service_account of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501


        :return: The default_service_account of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._default_service_account

    @default_service_account.setter
    def default_service_account(self, default_service_account):
        """Sets the default_service_account of this V1alpha1ApplicationDestinationServiceAccount.


        :param default_service_account: The default_service_account of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501
        :type: str
        """

        self._default_service_account = default_service_account

    @property
    def namespace(self):
        """Gets the namespace of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501

        Namespace specifies the target namespace for the application's resources.  # noqa: E501

        :return: The namespace of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this V1alpha1ApplicationDestinationServiceAccount.

        Namespace specifies the target namespace for the application's resources.  # noqa: E501

        :param namespace: The namespace of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def server(self):
        """Gets the server of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501

        Server specifies the URL of the target cluster's Kubernetes control plane API.  # noqa: E501

        :return: The server of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this V1alpha1ApplicationDestinationServiceAccount.

        Server specifies the URL of the target cluster's Kubernetes control plane API.  # noqa: E501

        :param server: The server of this V1alpha1ApplicationDestinationServiceAccount.  # noqa: E501
        :type: str
        """

        self._server = server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ApplicationDestinationServiceAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ApplicationDestinationServiceAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ApplicationDestinationServiceAccount):
            return True

        return self.to_dict() != other.to_dict()
