# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from argocd.configuration import Configuration


class V1alpha1SourceHydrator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dry_source': 'V1alpha1DrySource',
        'hydrate_to': 'V1alpha1HydrateTo',
        'sync_source': 'V1alpha1SyncSource'
    }

    attribute_map = {
        'dry_source': 'drySource',
        'hydrate_to': 'hydrateTo',
        'sync_source': 'syncSource'
    }

    def __init__(self, dry_source=None, hydrate_to=None, sync_source=None, _configuration=None):  # noqa: E501
        """V1alpha1SourceHydrator - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dry_source = None
        self._hydrate_to = None
        self._sync_source = None
        self.discriminator = None

        if dry_source is not None:
            self.dry_source = dry_source
        if hydrate_to is not None:
            self.hydrate_to = hydrate_to
        if sync_source is not None:
            self.sync_source = sync_source

    @property
    def dry_source(self):
        """Gets the dry_source of this V1alpha1SourceHydrator.  # noqa: E501


        :return: The dry_source of this V1alpha1SourceHydrator.  # noqa: E501
        :rtype: V1alpha1DrySource
        """
        return self._dry_source

    @dry_source.setter
    def dry_source(self, dry_source):
        """Sets the dry_source of this V1alpha1SourceHydrator.


        :param dry_source: The dry_source of this V1alpha1SourceHydrator.  # noqa: E501
        :type: V1alpha1DrySource
        """

        self._dry_source = dry_source

    @property
    def hydrate_to(self):
        """Gets the hydrate_to of this V1alpha1SourceHydrator.  # noqa: E501


        :return: The hydrate_to of this V1alpha1SourceHydrator.  # noqa: E501
        :rtype: V1alpha1HydrateTo
        """
        return self._hydrate_to

    @hydrate_to.setter
    def hydrate_to(self, hydrate_to):
        """Sets the hydrate_to of this V1alpha1SourceHydrator.


        :param hydrate_to: The hydrate_to of this V1alpha1SourceHydrator.  # noqa: E501
        :type: V1alpha1HydrateTo
        """

        self._hydrate_to = hydrate_to

    @property
    def sync_source(self):
        """Gets the sync_source of this V1alpha1SourceHydrator.  # noqa: E501


        :return: The sync_source of this V1alpha1SourceHydrator.  # noqa: E501
        :rtype: V1alpha1SyncSource
        """
        return self._sync_source

    @sync_source.setter
    def sync_source(self, sync_source):
        """Sets the sync_source of this V1alpha1SourceHydrator.


        :param sync_source: The sync_source of this V1alpha1SourceHydrator.  # noqa: E501
        :type: V1alpha1SyncSource
        """

        self._sync_source = sync_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1SourceHydrator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SourceHydrator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1SourceHydrator):
            return True

        return self.to_dict() != other.to_dict()
