# coding: utf-8

"""
    Consolidate Services

    Description of all APIs  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from pyargocd.configuration import Configuration


class ApplicationApplicationSyncRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_namespace': 'str',
        'dry_run': 'bool',
        'infos': 'list[V1alpha1Info]',
        'manifests': 'list[str]',
        'name': 'str',
        'project': 'str',
        'prune': 'bool',
        'resources': 'list[V1alpha1SyncOperationResource]',
        'retry_strategy': 'V1alpha1RetryStrategy',
        'revision': 'str',
        'revisions': 'list[str]',
        'source_positions': 'list[str]',
        'strategy': 'V1alpha1SyncStrategy',
        'sync_options': 'ApplicationSyncOptions'
    }

    attribute_map = {
        'app_namespace': 'appNamespace',
        'dry_run': 'dryRun',
        'infos': 'infos',
        'manifests': 'manifests',
        'name': 'name',
        'project': 'project',
        'prune': 'prune',
        'resources': 'resources',
        'retry_strategy': 'retryStrategy',
        'revision': 'revision',
        'revisions': 'revisions',
        'source_positions': 'sourcePositions',
        'strategy': 'strategy',
        'sync_options': 'syncOptions'
    }

    def __init__(self, app_namespace=None, dry_run=None, infos=None, manifests=None, name=None, project=None, prune=None, resources=None, retry_strategy=None, revision=None, revisions=None, source_positions=None, strategy=None, sync_options=None, _configuration=None):  # noqa: E501
        """ApplicationApplicationSyncRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_namespace = None
        self._dry_run = None
        self._infos = None
        self._manifests = None
        self._name = None
        self._project = None
        self._prune = None
        self._resources = None
        self._retry_strategy = None
        self._revision = None
        self._revisions = None
        self._source_positions = None
        self._strategy = None
        self._sync_options = None
        self.discriminator = None

        if app_namespace is not None:
            self.app_namespace = app_namespace
        if dry_run is not None:
            self.dry_run = dry_run
        if infos is not None:
            self.infos = infos
        if manifests is not None:
            self.manifests = manifests
        if name is not None:
            self.name = name
        if project is not None:
            self.project = project
        if prune is not None:
            self.prune = prune
        if resources is not None:
            self.resources = resources
        if retry_strategy is not None:
            self.retry_strategy = retry_strategy
        if revision is not None:
            self.revision = revision
        if revisions is not None:
            self.revisions = revisions
        if source_positions is not None:
            self.source_positions = source_positions
        if strategy is not None:
            self.strategy = strategy
        if sync_options is not None:
            self.sync_options = sync_options

    @property
    def app_namespace(self):
        """Gets the app_namespace of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The app_namespace of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_namespace

    @app_namespace.setter
    def app_namespace(self, app_namespace):
        """Sets the app_namespace of this ApplicationApplicationSyncRequest.


        :param app_namespace: The app_namespace of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: str
        """

        self._app_namespace = app_namespace

    @property
    def dry_run(self):
        """Gets the dry_run of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The dry_run of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ApplicationApplicationSyncRequest.


        :param dry_run: The dry_run of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def infos(self):
        """Gets the infos of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The infos of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: list[V1alpha1Info]
        """
        return self._infos

    @infos.setter
    def infos(self, infos):
        """Sets the infos of this ApplicationApplicationSyncRequest.


        :param infos: The infos of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: list[V1alpha1Info]
        """

        self._infos = infos

    @property
    def manifests(self):
        """Gets the manifests of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The manifests of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._manifests

    @manifests.setter
    def manifests(self, manifests):
        """Sets the manifests of this ApplicationApplicationSyncRequest.


        :param manifests: The manifests of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: list[str]
        """

        self._manifests = manifests

    @property
    def name(self):
        """Gets the name of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The name of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationApplicationSyncRequest.


        :param name: The name of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The project of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ApplicationApplicationSyncRequest.


        :param project: The project of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def prune(self):
        """Gets the prune of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The prune of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prune

    @prune.setter
    def prune(self, prune):
        """Sets the prune of this ApplicationApplicationSyncRequest.


        :param prune: The prune of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: bool
        """

        self._prune = prune

    @property
    def resources(self):
        """Gets the resources of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The resources of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: list[V1alpha1SyncOperationResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ApplicationApplicationSyncRequest.


        :param resources: The resources of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: list[V1alpha1SyncOperationResource]
        """

        self._resources = resources

    @property
    def retry_strategy(self):
        """Gets the retry_strategy of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The retry_strategy of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: V1alpha1RetryStrategy
        """
        return self._retry_strategy

    @retry_strategy.setter
    def retry_strategy(self, retry_strategy):
        """Sets the retry_strategy of this ApplicationApplicationSyncRequest.


        :param retry_strategy: The retry_strategy of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: V1alpha1RetryStrategy
        """

        self._retry_strategy = retry_strategy

    @property
    def revision(self):
        """Gets the revision of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The revision of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ApplicationApplicationSyncRequest.


        :param revision: The revision of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def revisions(self):
        """Gets the revisions of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The revisions of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._revisions

    @revisions.setter
    def revisions(self, revisions):
        """Sets the revisions of this ApplicationApplicationSyncRequest.


        :param revisions: The revisions of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: list[str]
        """

        self._revisions = revisions

    @property
    def source_positions(self):
        """Gets the source_positions of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The source_positions of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_positions

    @source_positions.setter
    def source_positions(self, source_positions):
        """Sets the source_positions of this ApplicationApplicationSyncRequest.


        :param source_positions: The source_positions of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: list[str]
        """

        self._source_positions = source_positions

    @property
    def strategy(self):
        """Gets the strategy of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The strategy of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: V1alpha1SyncStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this ApplicationApplicationSyncRequest.


        :param strategy: The strategy of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: V1alpha1SyncStrategy
        """

        self._strategy = strategy

    @property
    def sync_options(self):
        """Gets the sync_options of this ApplicationApplicationSyncRequest.  # noqa: E501


        :return: The sync_options of this ApplicationApplicationSyncRequest.  # noqa: E501
        :rtype: ApplicationSyncOptions
        """
        return self._sync_options

    @sync_options.setter
    def sync_options(self, sync_options):
        """Sets the sync_options of this ApplicationApplicationSyncRequest.


        :param sync_options: The sync_options of this ApplicationApplicationSyncRequest.  # noqa: E501
        :type: ApplicationSyncOptions
        """

        self._sync_options = sync_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationApplicationSyncRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationApplicationSyncRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationApplicationSyncRequest):
            return True

        return self.to_dict() != other.to_dict()
